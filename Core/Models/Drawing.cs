// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Core/Models/Drawing.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Core/Models/Drawing.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class DrawingReflection {

  #region Descriptor
  /// <summary>File descriptor for Core/Models/Drawing.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DrawingReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChlDb3JlL01vZGVscy9EcmF3aW5nLnByb3RvIkAKB1BvbHlnb24SGQoFYnJ1",
          "c2gYASABKAsyCi5CcnVzaERhdGESGgoGcG9pbnRzGAIgAygLMgouUG9pbnRE",
          "YXRhIiEKCVBvaW50RGF0YRIJCgF4GAEgASgFEgkKAXkYAiABKAUiRAoJQnJ1",
          "c2hEYXRhEgsKA1JlZBgBIAEoBRINCgVHcmVlbhgCIAEoBRIMCgRCbHVlGAMg",
          "ASgFEg0KBUFscGhhGAQgASgFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::Polygon), global::Polygon.Parser, new[]{ "Brush", "Points" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PointData), global::PointData.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::BrushData), global::BrushData.Parser, new[]{ "Red", "Green", "Blue", "Alpha" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Polygon : pb::IMessage<Polygon> {
  private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
  public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::DrawingReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Polygon() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Polygon(Polygon other) : this() {
    Brush = other.brush_ != null ? other.Brush.Clone() : null;
    points_ = other.points_.Clone();
  }

  public Polygon Clone() {
    return new Polygon(this);
  }

  /// <summary>Field number for the "brush" field.</summary>
  public const int BrushFieldNumber = 1;
  private global::BrushData brush_;
  public global::BrushData Brush {
    get { return brush_; }
    set {
      brush_ = value;
    }
  }

  /// <summary>Field number for the "points" field.</summary>
  public const int PointsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PointData> _repeated_points_codec
      = pb::FieldCodec.ForMessage(18, global::PointData.Parser);
  private readonly pbc::RepeatedField<global::PointData> points_ = new pbc::RepeatedField<global::PointData>();
  public pbc::RepeatedField<global::PointData> Points {
    get { return points_; }
  }

  public override bool Equals(object other) {
    return Equals(other as Polygon);
  }

  public bool Equals(Polygon other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Brush, other.Brush)) return false;
    if(!points_.Equals(other.points_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (brush_ != null) hash ^= Brush.GetHashCode();
    hash ^= points_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (brush_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Brush);
    }
    points_.WriteTo(output, _repeated_points_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (brush_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brush);
    }
    size += points_.CalculateSize(_repeated_points_codec);
    return size;
  }

  public void MergeFrom(Polygon other) {
    if (other == null) {
      return;
    }
    if (other.brush_ != null) {
      if (brush_ == null) {
        brush_ = new global::BrushData();
      }
      Brush.MergeFrom(other.Brush);
    }
    points_.Add(other.points_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (brush_ == null) {
            brush_ = new global::BrushData();
          }
          input.ReadMessage(brush_);
          break;
        }
        case 18: {
          points_.AddEntriesFrom(input, _repeated_points_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PointData : pb::IMessage<PointData> {
  private static readonly pb::MessageParser<PointData> _parser = new pb::MessageParser<PointData>(() => new PointData());
  public static pb::MessageParser<PointData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::DrawingReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PointData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PointData(PointData other) : this() {
    x_ = other.x_;
    y_ = other.y_;
  }

  public PointData Clone() {
    return new PointData(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private int x_;
  public int X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private int y_;
  public int Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as PointData);
  }

  public bool Equals(PointData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X != 0) hash ^= X.GetHashCode();
    if (Y != 0) hash ^= Y.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(X);
    }
    if (Y != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Y);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (X != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
    }
    if (Y != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
    }
    return size;
  }

  public void MergeFrom(PointData other) {
    if (other == null) {
      return;
    }
    if (other.X != 0) {
      X = other.X;
    }
    if (other.Y != 0) {
      Y = other.Y;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          X = input.ReadInt32();
          break;
        }
        case 16: {
          Y = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BrushData : pb::IMessage<BrushData> {
  private static readonly pb::MessageParser<BrushData> _parser = new pb::MessageParser<BrushData>(() => new BrushData());
  public static pb::MessageParser<BrushData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::DrawingReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BrushData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BrushData(BrushData other) : this() {
    red_ = other.red_;
    green_ = other.green_;
    blue_ = other.blue_;
    alpha_ = other.alpha_;
  }

  public BrushData Clone() {
    return new BrushData(this);
  }

  /// <summary>Field number for the "Red" field.</summary>
  public const int RedFieldNumber = 1;
  private int red_;
  public int Red {
    get { return red_; }
    set {
      red_ = value;
    }
  }

  /// <summary>Field number for the "Green" field.</summary>
  public const int GreenFieldNumber = 2;
  private int green_;
  public int Green {
    get { return green_; }
    set {
      green_ = value;
    }
  }

  /// <summary>Field number for the "Blue" field.</summary>
  public const int BlueFieldNumber = 3;
  private int blue_;
  public int Blue {
    get { return blue_; }
    set {
      blue_ = value;
    }
  }

  /// <summary>Field number for the "Alpha" field.</summary>
  public const int AlphaFieldNumber = 4;
  private int alpha_;
  public int Alpha {
    get { return alpha_; }
    set {
      alpha_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as BrushData);
  }

  public bool Equals(BrushData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Red != other.Red) return false;
    if (Green != other.Green) return false;
    if (Blue != other.Blue) return false;
    if (Alpha != other.Alpha) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Red != 0) hash ^= Red.GetHashCode();
    if (Green != 0) hash ^= Green.GetHashCode();
    if (Blue != 0) hash ^= Blue.GetHashCode();
    if (Alpha != 0) hash ^= Alpha.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Red != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Red);
    }
    if (Green != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Green);
    }
    if (Blue != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Blue);
    }
    if (Alpha != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Alpha);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Red != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Red);
    }
    if (Green != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Green);
    }
    if (Blue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blue);
    }
    if (Alpha != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alpha);
    }
    return size;
  }

  public void MergeFrom(BrushData other) {
    if (other == null) {
      return;
    }
    if (other.Red != 0) {
      Red = other.Red;
    }
    if (other.Green != 0) {
      Green = other.Green;
    }
    if (other.Blue != 0) {
      Blue = other.Blue;
    }
    if (other.Alpha != 0) {
      Alpha = other.Alpha;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Red = input.ReadInt32();
          break;
        }
        case 16: {
          Green = input.ReadInt32();
          break;
        }
        case 24: {
          Blue = input.ReadInt32();
          break;
        }
        case 32: {
          Alpha = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
